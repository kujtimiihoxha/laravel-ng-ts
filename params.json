{
  "name": "laravel-ng-ts",
  "tagline": "Laravel 5.2 Angular 1.5 Typescript  Starter.",
  "body": "# Laravel Angular Typescript starter.\r\nThis project is an attempt to make a good starting point for developers who want to use Angular 1.5 and Laravel 5.2.   \r\nSince Angular 2 is coming in the near future this project is aiming to make the transition to Angular 2 a bit easier with\r\ntypescript integration and custom ```decorators``` that use a similar syntax that Angular 2 is using.   \r\nBesides typescript and decorators this project is setup to automatically handle the views and store them in the ```$templateCashe``` of the angular app,Depending on the \r\nfolder placement of the view it will be stored in the same path in the ```$templateCashe``` with the ```./views/``` prepended.   \r\nThe project uses ```SASS``` for styling the views, it is configured to automatically compile ```.scss``` files and store the concatenated output in ```public/css/app.css```  \r\n\r\nAn example of the custom decorators is the ```@Component()``` decorator that is used to create a new angular component similar to Angular 2 components.   \r\n```typescript\r\nmodule App.Components.MainSideBar {\r\n    import ISettingsModel = App.Models.ISettingsModel;\r\n    export interface IMenuItem {\r\n        title: string,\r\n        icon: string,\r\n        state: string,\r\n        children : IMenuItem[]\r\n    }\r\n    @Component({\r\n            selector: \"main-sidebar\",\r\n            templateUrl: \"./views/components/main-sidebar/main-sidebar.template.html\"\r\n            })\r\n    @Inject(\"App.Models.SettingsModel\")\r\n    class MainSideBarComponent {\r\n        private menuItems: IMenuItem[];\r\n        constructor(SettingsModel: ISettingsModel) {\r\n            this.menuItems = JSON.parse(SettingsModel.values).items;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis example shows how you can easily create and register components using ```@Component``` decorator.\r\nAlso you can notice the ```@Inject``` decorator that is used to inject injectable factory methods or constructor functions.\r\n\r\n## Installation\r\n``` bash\r\nnpm install -g yo\r\nnpm install -g generator-laravel-ng-ts\r\n ```\r\n## Create the project \r\n```bash\r\nmkdir my-project\r\ncd my-project\r\nyo laravel-ng-ts\r\n```\r\n## Prepare the app\r\nChange the ```.env``` file and add your database credentials.\r\nRun: \r\n```\r\nphp artisan migrate\r\nphp artisan db:seed\r\n```\r\n\r\n## Running the app\r\nOpen two terminal windows and navigate to the folder where you \r\nproject is saved , than in one terminal window run:\r\n```bash\r\ngulp && gulp watch\r\n```\r\nand the other : \r\n```bash\r\nphp artisan serve\r\n```\r\n\r\nafter both tasks are running go to \r\n```\r\nhttp://localhost:8000\r\n```\r\n\r\nlogin to dashboard \r\n```\r\ngo to  http://localhost:8000/#/auth/login\r\n\r\nemail: abc@gmail.com\r\npass: abc@12345\r\n```\r\n### Supported decorators \r\n-  ```@Component```  - to generate components use ```laravel-ng-ts:component [component-name]```\r\n-  ```@Service```    - to generate services use ```laravel-ng-ts:service [service-name]```\r\n-  ```@Config```     - to generate a config function use ```laravel-ng-ts:config [config-name]```\r\n-  ```@Constant```   - to generate a constant use ```laravel-ng-ts:constant [constant-name]```\r\n-  ```@Filter```     - to generate a filter function use ```laravel-ng-ts:filter [filter-name]```\r\n-  ```@RouteConfig``` - to generate a route use ```laravel-ng-ts:route [state] [route-url] [route-name] [path](optional)```\r\n-  ```@Inject```\r\n-  ```@Run```         - to generate a run function use ```laravel-ng-ts:filter [run-name]```\r\n-  ```@Directive```   - it is recommended to use component, you can use directives similar to components. \r\n-  ```@Describe```    - to generate a unit tests use ```laravel-ng-ts:describe [describe-name]```\r\n\r\nTo find out more about the generators see   [kujtimiihoxha/generator-laravel-ng-ts](https://github.com/kujtimiihoxha/generator-laravel-ng-ts).\r\n## @Component()\r\nThe component decorator accepts an object with the type of ```App.Decorators.IComponentOptions``` that extends ```angular.IComponentOptions```\r\nthe only additional field that is added is the ```selector``` field.\r\n\r\n**IComponentOptions**\r\n\r\n``` typescript\r\n /**\r\n     * Component definition object (a simplified directive definition object)\r\n     */\r\n    interface IComponentOptions {\r\n        /**\r\n         * The html5 tag of the component\r\n         */\r\n        selector: string\r\n        /**\r\n         * Controller constructor function that should be associated with newly created scope or the name of a registered\r\n         * controller if passed as a string. Empty function by default.\r\n         * Use the array form to define dependencies (necessary if strictDi is enabled and you require dependency injection)\r\n         */\r\n        controller?: string | Function | (string | Function)[];\r\n        /**\r\n         * An identifier name for a reference to the controller. If present, the controller will be published to scope under\r\n         * the controllerAs name. If not present, this will default to be the same as the component name.\r\n         * @default \"$ctrl\"\r\n         */\r\n        controllerAs?: string;\r\n        /**\r\n         * html template as a string or a function that returns an html template as a string which should be used as the\r\n         * contents of this component. Empty string by default.\r\n         * If template is a function, then it is injected with the following locals:\r\n         * $element - Current element\r\n         * $attrs - Current attributes object for the element\r\n         * Use the array form to define dependencies (necessary if strictDi is enabled and you require dependency injection)\r\n         */\r\n        template?: string | Function | (string | Function)[];\r\n        /**\r\n         * path or function that returns a path to an html template that should be used as the contents of this component.\r\n         * If templateUrl is a function, then it is injected with the following locals:\r\n         * $element - Current element\r\n         * $attrs - Current attributes object for the element\r\n         * Use the array form to define dependencies (necessary if strictDi is enabled and you require dependency injection)\r\n         */\r\n        templateUrl?: string | Function | (string | Function)[];\r\n        /**\r\n         * Define DOM attribute binding to component properties. Component properties are always bound to the component\r\n         * controller and not to the scope.\r\n         */\r\n        bindings?: {[binding: string]: string};\r\n        /**\r\n         * Whether transclusion is enabled. Enabled by default.\r\n         */\r\n        transclude?: boolean | string | {[slot: string]: string};\r\n        require?: string | string[] | {[controller: string]: string};\r\n    }\r\n```\r\n## @RouteConfig()\r\nThe RouteConfig decorator makes it very easy register routes and route corresponding controllers it uses ```ui-router``` \r\nand all the options that ```ui-router``` provides. RouteConfig automatically registers the target(class) of the decorator as the route controller. \r\nRoutes also are configured to support user access levels.   \r\nExample: \r\n```typescript\r\nmodule App.Routes.LayoutAdmin.Home {\r\n    import AccessLevels = App.Core.Constants.AccessLevels;\r\n\r\n    @RouteConfig(\"admin.dashboard\", {\r\n        url: \"/dashboard\",\r\n        data: {\r\n            access: AccessLevels.admin\r\n        },\r\n        templateUrl: \"./views/routes/layout-admin/dashboard/dashboard.html\"\r\n    })\r\n    class Home {\r\n        private usr: {};\r\n        panels: any[];\r\n        lineChart: any;\r\n        pieChart: any;\r\n        doughnutChart: any;\r\n        constructor() {\r\n            this.addMockPanels();\r\n            this.addMockLineChart();\r\n            this.addMockPieChar();\r\n            this.addMockdoughnutChar();\r\n        }\r\n\r\n        addMockPanels(): void {\r\n            this.panels = [];\r\n            this.panels.push({\r\n                title: \"NEW USERS\",\r\n                value: 26,\r\n                bodyClass: \"text-light bk-primary\",\r\n                link: \"#\",\r\n                linkText: \"Full Details Hello\"\r\n            });\r\n            this.panels.push({\r\n                title: \"SUPPORT TICKETS\",\r\n                value: 8,\r\n                bodyClass: \"text-light bk-success\",\r\n                link: \"#\",\r\n                linkText: \"See All\"\r\n            });\r\n            this.panels.push({\r\n                title: \"NEW ORDERS\",\r\n                value: 58,\r\n                bodyClass: \"text-light bk-info\",\r\n                link: \"#\",\r\n                linkText: \"See All\"\r\n            });\r\n            this.panels.push({\r\n                title: \"NEW COMMENTS\",\r\n                value: 18,\r\n                bodyClass: \"text-light bk-warning\",\r\n                link: \"#\",\r\n                linkText: \"See All\"\r\n            });\r\n        }\r\n\r\n        addMockLineChart() {\r\n            this.lineChart = {\r\n                id: \"lineChartExample\",\r\n                height: 310,\r\n                width: 600\r\n            };\r\n        }\r\n\r\n        addMockPieChar() {\r\n            this.pieChart = {\r\n                id: \"pieCharExample\",\r\n                height: 1200,\r\n                width: 900\r\n            };\r\n        }\r\n\r\n        addMockdoughnutChar() {\r\n            this.doughnutChart = {\r\n                id: \"doughnutCharExample\",\r\n                height: 1200,\r\n                width: 900\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n## @Service()\r\nThe service decorator is used to register a service to the app. It accepts an object the type of ```App.Decorators.IServiceOptions```  with the name of the service.\r\n\r\n**IServiceOptions**\r\n```typescript\r\n interface IServiceOptions {\r\n        /**\r\n         * The name of the service\r\n         */\r\n        serviceName: string;\r\n    }\r\n```\r\n\r\nExample:\r\n```typescript\r\nmodule App.Core.Services {\r\n    import IPromise = restangular.IPromise;\r\n    import IAuthModule = App.Core.Models.AuthModel;\r\n    import UserRoles = App.Core.Constants.UserRoles;\r\n\r\n    export interface IAuthService {\r\n        login(user: IAuthModule.ILoginModel): IPromise<any>;\r\n        register(user: IAuthModule.IRegisterModel): IPromise<any>;\r\n        logout(): IPromise<any>;\r\n        isAuthenticated(): boolean\r\n        isAuthorized(access: UserRoles[]): boolean;\r\n        getCurrentUser(): any;\r\n    }\r\n    @Service({\r\n        serviceName: \"App.Core.Services.AuthService\"\r\n    })\r\n    @Inject(\"$auth\", \"$localStorage\")\r\n    class AuthService implements IAuthService {\r\n        constructor(private $auth: any, private $localStorage: any) {}\r\n        login(user: IAuthModule.ILoginModel): IPromise<any> {\r\n            const storage = this.$localStorage;\r\n            return this.$auth.login(user).then((response: any) => {\r\n                storage[\"user\"] = response.data.data.user;\r\n            });\r\n        }\r\n        register(user: IAuthModule.IRegisterModel): IPromise<any> {\r\n            return this.$auth.signup(user);\r\n        }\r\n        logout(): IPromise<any> {\r\n            const storage = this.$localStorage;\r\n            return this.$auth.logout().then(() => {\r\n                storage[\"user\"] = null;\r\n            });\r\n        }\r\n        isAuthenticated(): boolean {\r\n            return !!this.$auth.getToken();\r\n        }\r\n        getCurrentUser(): any {\r\n            if (this.$localStorage[\"user\"] == null) {\r\n                return { role: Core.Constants.UserRoles.Guest }\r\n            } else {\r\n                return this.$localStorage[\"user\"];\r\n            }\r\n        }\r\n        isAuthorized(access: UserRoles[]): boolean {\r\n            if (access.indexOf(UserRoles.Guest) !== -1) {\r\n                return true;\r\n            }\r\n            return (this.isAuthenticated() && access.indexOf(this.getCurrentUser().role) !== -1);\r\n        }\r\n    }\r\n}\r\n```\r\n##@Config()\r\nThe config decorator is used to register a function that will be executed in the config stage of the angular app;\r\nExample:\r\n```typescript\r\nmodule App.Core.Configs {\r\n    \"use strict\";\r\n    import IUrlRouterProvider = angular.ui.IUrlRouterProvider;\r\n    import ILocationProvider = angular.ILocationProvider;\r\n    class  CoreConfig {\r\n        @Config()\r\n        @Inject(\"$provide\", \"$locationProvider\",  \"$urlRouterProvider\",\"$localStorageProvider\")\r\n        private static config($provide: any, $locationProvider: ILocationProvider , $urlRouterProvider: IUrlRouterProvider, $localStorageProvider: any) {\r\n            $provide.decorator(\"$uiViewScroll\", [\"$delegate\", \"$window\", ($delegate: any, $window: any) => () => {\r\n                $window.scrollTo(0, 0);\r\n            }]);\r\n            $urlRouterProvider.otherwise(\"/\");\r\n            if (angular.isUndefined($localStorageProvider[\"user\"])) {\r\n                $localStorageProvider[\"user\"] = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n##@Run()\r\nThe run decorator is used to register a function that will be executed in the run stage of the angular app;\r\nExample:\r\n```typescript\r\nmodule App.Core.Runs {\r\n    \"use strict\";\r\n    import IAuthService = App.Core.Services.IAuthService;\r\n    import AccessLevels = App.Core.Constants.AccessLevels;\r\n    class  CoreRun {\r\n        @Run()\r\n        @Inject( \"$rootScope\", \"$state\", \"App.Core.Services.AuthService\")\r\n        private static run($rootScope: any, $state: any, authenticationService: IAuthService) {\r\n            $rootScope.currentUser = authenticationService.getCurrentUser();\r\n            $rootScope.AccessLevels = AccessLevels;\r\n            $rootScope.$on(\"$stateChangeStart\", (event: any, toState: any) => {\r\n                if (!(\"data\" in toState) || !(\"access\" in toState.data)) {\r\n                    event.preventDefault();\r\n                    $state.go(\"403\");\r\n                } else if (!authenticationService.isAuthorized(toState.data.access) && toState.name !== \"auth.login\") {\r\n                    event.preventDefault();\r\n                      if (authenticationService.isAuthenticated()) {\r\n                        $state.go(\"403\");\r\n                    } else {\r\n                        $state.go(\"auth.login\");\r\n                    }\r\n                } else if (authenticationService.isAuthenticated() && toState.url === \"/\") {\r\n                    event.preventDefault();\r\n                    $state.go(\"admin.dashboard\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n## @Describe()\r\nIs used for unit testing, the project uses [ng-describe](https://github.com/kensho/ng-describe), all the options from this \r\nrepository can be used in the decorator.\r\n\r\nExample: \r\n```\r\nmodule App.Tests {\r\n    class AppTest {\r\n        @Describe({\r\n            name: \"First Test\"\r\n        })\r\n        static tests(deps: any) {\r\n            it(\"Should do something\", () => {\r\n                expect(2).toBe(2);\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n**If you create your own classes and they have dependencies on other classes do not forget to add a ```ref``` comment on the top \r\nof the class so after the concatenation the order of the classes that are put to the ```app.js``` is right. You can se an example in the ```SettingsModel``` class**\r\n\r\n## Folder Structure \r\n\r\n#### Backend\r\n\r\n- The backend folder structure is the same as the standard laravel folder structure.\r\n\r\n#### Frontend\r\n\r\n- All the frontend files are in the  ```client/``` , ```gulp``` and ```theme``` folders.\r\n\r\n##### Client folder :\r\n\r\n```\r\nclient/\r\n    |- app/                                      --> source code folder\r\n    |   |- components/                              --> angular components\r\n    |   |- config/                                  --> angular config\r\n    |   |- constants/                               --> angular constants\r\n    |   |- core/                                    --> core files(config,run,core-services etc.)\r\n    |   |   |- config/                                  --> core configurations folder\r\n    |   |   |   |- core.config.ts                           --> some necessary configurations\r\n    |   |   |   |- loading-bar.config.ts                    --> loading bar configurations\r\n    |   |   |   |- satellizer.config.ts                     --> satellizer cofigurations\r\n    |   |   |- constants/                               --> core constants folder\r\n    |   |   |   |- core.constant.ts                         --> some necessary configurations\r\n    |   |   |- models/                                  --> core models folder\r\n    |   |   |   |- auth.model.ts                            --> login and register user models\r\n    |   |   |   |- base.model.ts                            --> base model that all resource models inherit\r\n    |   |   |- resources/                               --> core resources folder\r\n    |   |   |   |- base.resource.ts                         --> base resource that all resources inherit\r\n    |   |   |- run/                                     --> core run configurations folder\r\n    |   |   |   |- core.run.ts                         --> base resource that all resources inherit\r\n    |   |   |- services/                                --> core services\r\n    |   |   |   |- api.service.ts                         --> setup restangular api to work with jwt and our api\r\n    |   |   |   |- auth.service.ts                        --> authentication service to handle user session, login, logout, register\r\n    |   |- models/                                  --> models used by the resources to get objects from the api\r\n    |   |- resources/                               --> resources to comunicate with the api\r\n    |   |- routes/                                  --> app routes\r\n    |   |- run/                                     --> app run\r\n    |   |- services/                                --> app services\r\n    |   |- app.decorators.ts                        --> app decorators\r\n    |   |- app.main.ts                              --> app main file\r\n    |- fonts/                                    -->fonts\r\n    |- images/                                   -->images\r\n```\r\n\r\n## Credits\r\n- Laravel angular material starter - [jadjoubran/laravel5-angular-material-starter](https://github.com/jadjoubran/laravel5-angular-material-starter)\r\n- Employee Scheduling UI - [martinmicunda/employee-scheduling-ui](https://github.com/martinmicunda/employee-scheduling-ui)\r\n\r\n## Licence\r\nMIT © [Kujtim Hoxha](kujtimhoxha.com)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}